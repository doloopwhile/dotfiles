#!/bin/bash
source /etc/profile

# brewなどでインストールしたコマンドを優先
export PATH="/usr/local/bin:$PATH"

# 分割した設定ファイルの読み込み
for f in ~/.bash.d/*.sh; do
  source "$f"
done

export PATH="$HOME/bin:$PATH"

# Lang
export LAMG=en_US.UTF-8
export LC_TIME=en_US.UTF-8
# vimをカラフルにする
export TERM=xterm-256color

# エディタ関連
export EDITOR=vi
if which vim &> /dev/null; then
  export EDITOR=vim
  alias vim='vim -p'
  alias vi='vim -p'
  export SVN_EDITOR=vim
fi

if [ -e "/Applications/MacVim.app" ]; then
  alias vi=/Applications/MacVim.app/Contents/MacOS/Vim
  alias vim=/Applications/MacVim.app/Contents/MacOS/Vim
  export EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim
  export SVN_EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim
fi

# Ctrl+S を無効
for h in "omoto-xubuntu" "m3-2015mac03.office.so-netm3.com"; do
  if [ "$(hostname)" = "$h" ]; then
    stty stop undef
  fi
done



# 便利なコマンド
LS_OPTIONS='-B -v --time-style=long-iso'

if ls --color &> /dev/null; then
  LS_OPTIONS="${LS_OPTIONS} --color=auto"
fi

if ls --group-directories-first &> /dev/null; then
  LS_OPTIONS="${LS_OPTIONS} --group-directories-first"
fi

alias ls='ls ${LS_OPTIONS}'
alias ll='ls -l -h -H -p ${LS_OPTIONS}'

if [ -f ~/.dircolors ] && which dircolors &> /dev/null; then
  eval "$(dircolors ~/.dircolors)"
fi

function now() {
  date +'%F %T'
}

alias cdpwd='cd $(pwd -P)'
alias gr='egrep --ignore-case --color=auto --line-number --with-filename --binary-files=without-match'
alias diff2html='~/dotfiles/diff2html/diff2html.py'
alias html2browse='~/dotfiles/diff2html/html2browse.py'
alias d2b='diff2html | html2browse'
alias nob='diff2html | html2browse'
alias escape='python ~/dotfiles/escape.py'
alias mime='~/dotfiles/mime.py'
alias savetemp='~/dotfiles/save-tempfile/save-tempfile.py'
alias save-tempfile='~/dotfiles/save-tempfile/save-tempfile.py'

function te {
  cat - | ~/dotfiles/save-tempfile/save-tempfile.py -c gvim
}
function v {
  cat - | ~/dotfiles/save-tempfile/save-tempfile.py -c gvim
}

alias colorize='python3 ~/dotfiles/colorize.py'
alias findall='~/dotfiles/findall'

# 存在するファイルのみをフィルタリング
function fexists() {
  cat - | while read line; do
    if [ -e "${line}" ]; then
      echo "${line}"
    fi
  done
}


function title() {
  echo -en "\033]0;$*\007"
}

# コマンド履歴の共有
function share_history {
  history -a
  history -c
  history -r
}

PROMPT_COMMAND='share_history;title "${USER}@${HOSTNAME%%.*}"'
shopt -u histappend
export HISTSIZE=10000
export HISTTIMEFORMAT='%Y-%m-%dT%T%z '

# シェルの細かい設定
set -o emacs
set mark-directories on
set show-all-if-ambiguous on
set visible-status on

# direnv
if which direnv &> /dev/null; then
  eval "$(direnv hook bash)"
fi


# pbcopy
if ! which pbcopy &> /dev/null; then
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

function ge() {
  ~/dotfiles/open-gvim "$(cat - | sed -e 's/\(^.*\):[[:digit:]]\+:.*/\1/' | sort -u)"
}

clean-meld() {
  paths=$(find . \
    -name '*.BACKUP.*' -or \
    -name '*.BASE.*'   -or \
    -name '*.LOCAL.*'  -or \
    -name '*.REMOTE.*'
  )

  if [ -z "${paths[@]}" ]; then
    return 0
  fi

  for f in "${paths[@]}"; do
    echo "$f"
  done

  echo -n "delete these files? [y/N] " >&2
  read input
  if [ "${input}" = "y" ]; then
    rm "${paths[@]}" || return 1
    return 0
  fi
  return 2
}


if which fzf &> /dev/null; then
  _replace_by_history() {
    local sed=sed
    if which gsed &> /dev/null; then
      sed=gsed
    fi
    local l
    l=$(HISTTIMEFORMAT='' history | sort -k1,1nr | $sed -e 's/^[[:space:]]*[0-9]\+[[:space:]]*//' | uniq-everseen | fzf --query "$READLINE_LINE")
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
  }

  _find_and_edit() {
    fzf | xargs gvim
  }

  bind -x '"\C-r": _replace_by_history'
  bind    '"\C-xr": reverse-search-history'
  bind -x '"`": _find_and_edit'
fi

export PATH=$PATH:/usr/local/haskell/ghc-7.8.3-x86_64/bin/

yaml2json() {
  ruby -ryaml -rjson -e "print YAML.load(STDIN).to_json" -
}

json2yaml() {
  ruby -ryaml -rjson -e "print JSON.load(STDIN).to_yaml" -
}

export PATH=$PATH:~/.cabal/bin
export PATH=$PATH:~/.local/bin
export PATH=$PATH:~/dotfiles/bin

alias stripcolor="perl -pe 's/\e\[?.*?[\@-~]//g'"

fe() {
  find . -name "${1:-*}" | fzf | xargs gvim
}

whichvi() {
  local f
  if [ -n "$1" ]; then
    which -a "$1" | fzf | xargs gvim
  else
    find $(echo "$PATH" | tr ':' ' ') -type f -perm +111 2>/dev/null | fzf | xargs gvim
  fi
}

## boot2docker
# if which boot2docker &>/dev/null && [ "$(boot2docker status)" = "running" ] ; then
#   eval "$(boot2docker shellinit | grep -v Writing)"
# fi

## Enable GNU command in OSX
if which gsed &> /dev/null; then
  alias sed=gsed
fi

# postgres
export PGDATA=/usr/local/var/postgres
alias vrename=~/dotfiles/vrename/vrename.py
export PATH=$PATH:$HOME/xsvutils/bin

# Oracle
if [ "$(hostname)" = "m3-2015mac03.office.so-netm3.com" ]; then
  export ORACLE_HOME=$HOME/instantclient_11_2/
  export PATH="$PATH:$ORACLE_HOME"
  export DYLD_LIBRARY_PATH=$ORACLE_HOME:$DYLD_LIBRARY_PATH
  export NLS_LANG=American_America.JA16EUCTILDE
  export TNS_ADMIN=$ORACLE_HOME/admin/network
fi

# fzf
export FZF_DEFAULT_OPTS="--no-sort -i --multi --reverse --cycle --prompt='QUERY> ' --inline-info --color=16"

function p() {
  local f;
  f="$({ echo -n 'Downloads'; find "$HOME/Documents/" -type 'd' -maxdepth 1 | sed -e 's|.*/||' | sort ; } | fzf)"
  if [ -z "$f" ]; then
    return 1
  fi
  if [ "$f" = "Downloads" ]; then
    cd "$HOME/Downloads"
    return
  fi
  cd "${HOME}/Documents/$f"
}

alias ..='. ~/.bashrc'
