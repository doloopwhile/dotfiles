#!/bin/bash
source /etc/profile

# brewなどでインストールしたコマンドを優先
export PATH="/usr/local/bin:$PATH"
export PATH="$PATH:$HOME/.cabal/bin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/node_modules/bin"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/dotfiles/bin:$PATH"

if which micro &> /dev/null; then
  export EDITOR=micro
  export SVN_EDITOR=micro
fi

# コマンド履歴の共有
function title() {
  echo -en "\033]0;$*\007"
}

function share_history {
  history -a
  history -c
  history -r
}
# direnvがPROMPT_COMMANDを使うので、先に定義する必要がある。
PROMPT_COMMAND='share_history;title "${USER}@${HOSTNAME%%.*}"'

shopt -u histappend
export HISTSIZE=10000
export HISTTIMEFORMAT='%Y-%m-%dT%T%z '

# 分割した設定ファイルの読み込み

source ~/dotfiles/bash/code.sh
source ~/dotfiles/bash/direnv.sh
source ~/dotfiles/bash/docker.sh
source ~/dotfiles/bash/git.sh
source ~/dotfiles/bash/go.sh
source ~/dotfiles/bash/heroku.sh
source ~/dotfiles/bash/ls.sh
source ~/dotfiles/bash/node.sh
source ~/dotfiles/bash/oracle.sh
source ~/dotfiles/bash/osx.sh
source ~/dotfiles/bash/postgres.sh
source ~/dotfiles/bash/ps.sh
source ~/dotfiles/bash/python.sh
source ~/dotfiles/bash/resin.sh
source ~/dotfiles/bash/ruby.sh
source ~/dotfiles/bash/vi.sh

# Lang
export LAMG=en_US.UTF-8
export LC_TIME=en_US.UTF-8
# vimをカラフルにする
export TERM=xterm-256color

# Ctrl+S を無効
for h in "omoto-xubuntu" "m3-2015mac03.office.so-netm3.com"; do
  if [ "$(hostname)" = "$h" ]; then
    stty stop undef
  fi
done

alias cdpwd='cd $(pwd -P)'
alias gr='egrep --ignore-case --color=auto --line-number --with-filename --binary-files=without-match'
alias diff2html='~/dotfiles/diff2html/diff2html.py'
alias html2browse='~/dotfiles/diff2html/html2browse.py'
alias d2b='diff2html | html2browse'
alias nob='diff2html | html2browse'
alias escape='python ~/dotfiles/escape.py'
alias mime='~/dotfiles/mime.py'

alias colorize='python3 ~/dotfiles/colorize.py'
alias findall='~/dotfiles/findall'

# 存在するファイルのみをフィルタリング
function fexists() {
  cat - | while read line; do
    if [ -e "${line}" ]; then
      echo "${line}"
    fi
  done
}

# シェルの細かい設定
set -o emacs
set mark-directories on
set show-all-if-ambiguous on
set visible-status on

# pbcopy
if ! which pbcopy &> /dev/null; then
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

function ge() {
  ~/dotfiles/open-gvim "$(cat - | sed -e 's/\(^.*\):[[:digit:]]\+:.*/\1/' | sort -u)"
}

clean-meld() {
  paths=$(find . \
    -name '*.BACKUP.*' -or \
    -name '*.BASE.*'   -or \
    -name '*.LOCAL.*'  -or \
    -name '*.REMOTE.*'
  )

  if [ -z "${paths[@]}" ]; then
    return 0
  fi

  for f in "${paths[@]}"; do
    echo "$f"
  done

  echo -n "delete these files? [y/N] " >&2
  read input
  if [ "${input}" = "y" ]; then
    rm "${paths[@]}" || return 1
    return 0
  fi
  return 2
}


if which fzf &> /dev/null; then
  _replace_by_history() {
    local sed=sed
    if which gsed &> /dev/null; then
      sed=gsed
    fi
    local l
    l="$(
      HISTTIMEFORMAT='' history \
      | sort -k1,1nr \
      | $sed -e 's/^ *[0-9]* *//' \
      | uniq-everseen \
      | fzf --query "$READLINE_LINE"
    )"
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
  }

  _find_and_edit() {
    ~/dotfiles/bin/walk-files | fzf | xargs code
  }

  bind -x '"\C-r": _replace_by_history'
  bind    '"\C-xr": reverse-search-history'
  bind -x '"`": _find_and_edit'

  # fzf
  export FZF_DEFAULT_OPTS="--no-sort -i --multi --reverse --cycle --prompt='QUERY> ' --inline-info --color=16"

  p() {
    path="$(~/dotfiles/select-directory)"
    if [ "$?" -ne 0 ]; then
      return 1
    fi
    cd -- "${path}" || return 1
  }

  d() {
    local f
    f=$()
    f="$({ echo '..'; find . -maxdepth 1 -mindepth 1 -type 'd' -name '' | grep -v "\/\." | sed -e 's|^./||' -e 's|$|/|' ; } | fzf)"
    if [ -z "$f" ]; then
      return 1
    fi
    cd "$f"
  }
fi

t() {
  local toplevel
  toplevel="$(git rev-parse --show-toplevel)"
  if [ $? -eq 0 ]; then
    cd "$toplevel" && return 0
  else
    return 1
  fi
}

export PATH=$PATH:/usr/local/haskell/ghc-7.8.3-x86_64/bin/

yaml2json() {
  ruby -ryaml -rjson -e "print YAML.load(STDIN).to_json" -
}

json2yaml() {
  ruby -ryaml -rjson -e "print JSON.load(STDIN).to_yaml" -
}

alias stripcolor="perl -pe 's/\e\[?.*?[\@-~]//g'"

fe() {
  find . -name "${1:-*}" | fzf | xargs $EDITOR
}

whichvi() {
  local f
  if [ -n "$1" ]; then
    which -a "$1" | fzf | xargs $EDITOR
  else
    paths=($(echo "$PATH" | tr ':' ' '))
    find "${paths[@]}" -type f -perm +111 2>/dev/null | fzf | xargs $EDITOR
  fi
}

generate_password() {
  /usr/bin/ruby -e 'chars = ("a".."z").to_a + ("A".."Z").to_a + ("0".."9").to_a; puts(32.times.map { chars.sample(1) }.join)'	
}

no_color() {
  cat - | gsed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"
}

te() {
  EXT='txt'
  while [ $# -gt 0 ]; do
    case "$1" in
      '-e' )
        shift
        EXT="$1"
      ;;
      '-h' )
        echo 'usage: COMMAND | te [-e EXT]'
        exit
      ;;
      * )
        echo 'usage: COMMAND | te [-e EXT]' >&2
        exit 1
      ;;
    esac
    shift
  done

  export LANG=C
  cat - \
    | no_color \
    | ~/dotfiles/bin/save-tempfile --abort-if-empty --prefix='.tmp.' --suffix=".${EXT}" -c code
}

de() {
  cat - | te -e diff
}


alias ..='. ~/.bashrc'
alias ...='$EDITOR ~/.bashrc'

if which gnome-open &> /dev/null; then
  alias open=gnome-open
fi
export ANSIBLE_NOCOWS=yes
export PATH="$PATH:~/Documents/m3kit/bin"
export PATH="$HOME/.quarry/bin:$PATH"export ORACLE_HOME=~/oracle_client/
