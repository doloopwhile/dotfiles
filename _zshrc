source /etc/zprofile
autoload -Uz add-zsh-hook
autoload -Uz colors
# 分割した設定ファイルの読み込み
for f in `find -L ~/.bash.d/ -type f`; do
  source $f
done

# Lang
export LAMG=en_US.UTF-8
export LC_TIME=en_US.UTF-8

# PS1の設定
export HOST_COLOR=0
if [[ 0 < "${#MY_HOST_NAMES[@]}" ]]; then
  for (( i=0; i < ${#MY_HOST_NAMES[@]}; i++ )); do
    if [[ "$(hostname -s)" == ${MY_HOST_NAMES[$i]} ]]; then
      export HOST_COLOR=${MY_HOST_COLORS[$i]}
      break
    fi
  done
fi
unset i


function C() {
  case $1 in
  black)    echo -e -n "\033[1;30m";;
  red)      echo -e -n "\033[1;31m";;
  green)    echo -e -n "\033[1;32m";;
  yellow)   echo -e -n "\033[1;33m";;
  blue)     echo -e -n "\033[1;34m";;
  magenta)  echo -e -n "\033[1;35m";;
  cyan)     echo -e -n "\033[1;36m";;
  white)    echo -e -n "\033[1;37m";;
  *) echo -e -n "\033[0m";;
  esac
}

function ps1_info() {
  local END_CODE=$?

  echo -n "${USER}@"
  echo -n -e "\033[${HOST_COLOR}m$(hostname -s)\033[0m "

  echo -n `date +'%F %H:%M:%S'`
  echo -n ' '

  echo -n '$?='
  if [ 0 -ne ${END_CODE} ]; then
    echo -n "$(C red)${END_CODE}$(C reset)"
  else
    echo -n 0
  fi

  echo -n ' '

  if git status 2>/dev/null 1>&2; then
    echo -n 'git['

    local modified=0
    local cached=0
    local untracked=0

    while read line; do
      if [ "$line" = '_?_?_' ]; then
        untracked=1
        continue
      fi

      if [[ "$line" =~ ^_[^[:space:]]_.?_ ]]; then
        cached=1
      fi

      if [[ "$line" =~ ^_._[^[:space:]]_ ]]; then
        modified=1
      fi
    done < <(git st | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')

    if [ $modified -ne 0 ]; then
      echo -n "$(C red)M$(C reset)"
    fi

    if [ $cached -ne 0 ]; then
      echo -n "$(C green)C$(C reset)"
    fi

    if [ $untracked -ne 0 ]; then
      echo -n "$(C red)?$(C reset)"
    fi

    echo -n ']='

    local branch=$(git branch 2>/dev/null | grep "^*" | sed -e "s/^* //")
    if [[ "${branch}" =~ ^bug- ]]; then
      C green
    elif [[ "${branch}" =~ ^atc- ]]; then
      C cyan
    elif [[ "${branch}" =~ ^tmp ]]; then
      C magenta
    elif [[ "${branch}" = "(detached from hde/master)" ]]; then
      C yellow
    else
      C white
    fi
    echo -n "${branch}"
    C reset
  else
    echo -n 'git[]='
  fi
  echo
  echo -n ' '

  pwd | sed -e "s|^${HOME%/}|~|"

  # if [ "$(id -u)" -eq 0 ]; then
  #   echo -n "$(C red)# " # rootの場合はシャープ
  # else
  #   echo -n -e "\033[${HOST_COLOR}m"%%"\033[0m " # 非rootユーザの場合はドル
  # fi
}
autoload -Uz add-zsh-hoo
add-zsh-hook precmd ps1_info

export PS1="%1(v|%F{green}%1v%f|)%# "


# vimをカラフルにする
export TERM=xterm-256color

# ~/bin をパスに加える
export PATH=$HOME/bin:$PATH

# エディタ関連
export EDITOR=vi
if which vim >/dev/null 2>&1 ; then
  alias vim='vim -p'
  alias vi='vim -p'
fi

if which gvim >/dev/null 2>&1; then
  alias gvim=~/dotfiles/open-gvim
fi



#git関連
export GIT_DISCOVERY_ACROSS_FILESYSTEM=true
export PATH=$HOME/.git-hooker/bin:$PATH
if which hub > /dev/null 2>&1; then
  eval "$(hub alias -s)"
fi

function dev() {
  if [[ "$(pwd)" =~ ^$HOME/v?dev([0-9]+) ]]; then
    ssh "dev${BASH_REMATCH[1]}"
    return $?
  else
    echo "Not in $HOME/v?dev([0-9]+)" >&2
    return 1
  fi
}

function vdev() {
  if [[ "$(pwd)" =~ ^$HOME/v?dev([0-9]+) ]]; then
    ssh "vdev${BASH_REMATCH[1]}"
    return $?
  else
    echo "Not in $HOME/v?dev([0-9]+)" >&2
    return 1
  fi
}

# Python関連
export PYTHONSTARTUP=~/.pythonstartup
if [ -z $VIRTUALENVWRAPPER_PYTHON ]; then
  if  [ -e /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
  elif [ -e /usr/bin/virtualenvwrapper.sh ]; then
    source /usr/bin/virtualenvwrapper.sh
  fi
fi

# 便利なコマンド
LS_OPTIONS=''

if ls --color > /dev/null 2>&1; then
  LS_OPTIONS="${LS_OPTIONS} --color=auto"
fi

if ls --group-directories-first > /dev/null 2>&1; then
  LS_OPTIONS="${LS_OPTIONS} --group-directories-first"
fi

alias ls="ls -B -v ${LS_OPTIONS}"
alias ll="ls -B -v -l -h -H -p ${LS_OPTIONS}"

if [ -f ~/.dircolors ]; then
  eval $(dircolors ~/.dircolors)
fi

function now() {
  date +'%F %T'
}

function mkcd() {
  mkdir -p $1 && cd $_
}

alias pd=pushd
alias bd=popd
alias d='dirs -v'
alias cdpwd='cd $(pwd -P)'
alias gr='egrep --ignore-case --color=auto --line-number --with-filename --binary-files=without-match'
alias diff2html='~/dotfiles/diff2html/diff2html.py'
alias html2browse='~/dotfiles/diff2html/html2browse.py'
alias d2b='diff2html | html2browse'
alias nob='diff2html | html2browse'
alias escape='python ~/dotfiles/escape.py'
alias mime='~/dotfiles/mime.py'
alias savetemp='~/dotfiles/save-tempfile/save-tempfile.py'
alias save-tempfile='~/dotfiles/save-tempfile/save-tempfile.py'

function te {
  cat - | ~/dotfiles/save-tempfile/save-tempfile.py -c gvim
}

alias colorize='python3 ~/dotfiles/colorize.py'
alias findall='~/dotfiles/findall'

# 存在するファイルのみをフィルタリング
function fexists() {
  cat - | while read line; do
    if [ -e ${line} ]; then
      echo ${line}
    fi
  done
}



# function update_terminal_title() {
#   printf "\033]0;%s:%s\007" "${HOSTNAME%%.*}" "$(echo "${PWD/#$HOME/~}" | sed -e 's|/.*/|**/|')"
# }

function title() {
  echo -en "\033]0;$@\007"
}

# コマンド履歴の共有
function share_history {
  history -a
  history -c
  history -r
}

PROMPT_COMMAND='share_history;title "${USER}@${HOSTNAME%%.*}"'
# shopt -u histappend
export HISTSIZE=1000000

# シェルの細かい設定
set -o emacs
set mark-directories on
set show-all-if-ambiguous on
set visible-status on

#rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
which rbenv >/dev/null 2>&1 && eval "$(rbenv init - zsh)" || true
